{"ast":null,"code":"var _jsxFileName = \"D:\\\\training\\\\react\\\\5\\\\serv_rout_db\\\\client\\\\src\\\\App.js\";\nimport React, { Component } from 'react'; // import axios from 'axios';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: [],\n      id: 0,\n      message: null,\n      intervalIsSet: false,\n      idToDelete: null,\n      idToUpdate: null,\n      objectToUpdate: null\n    };\n\n    this.getDataFromDb = () => {\n      // let arr =[]\n      fetch('http://localhost:3001/category').then(data => data.json()).then(res => this.setState({\n        data: res\n      })); // .then((res) => console.log(res))\n    };\n  }\n\n  // when component mounts, first thing it does is fetch all existing data in our db\n  // then we incorporate a polling logic so that we can easily see if our db has\n  // changed and implement those changes into our UI\n  componentDidMount() {\n    this.getDataFromDb();\n    console.log(this.state.data);\n\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb, 1000);\n      this.setState({\n        intervalIsSet: interval\n      });\n    }\n  } // never let a process live forever\n  // always kill a process everytime we are done using it\n\n\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({\n        intervalIsSet: null\n      });\n    }\n  } // just a note, here, in the front end, we use the id key of our data object\n  // in order to identify which we want to Update or delete.\n  // for our back end, we use the object id assigned by MongoDB to modify\n  // data base entries\n  // our first get method that uses our backend api to\n  // fetch data from our data base\n\n\n  // // our put method that uses our backend api\n  // // to create new query into our data base\n  // putDataToDB = (message) => {\n  //     let currentIds = this.state.data.map((data) => data.id);\n  //     let idToBeAdded = 0;\n  //     while (currentIds.includes(idToBeAdded)) {\n  //         ++idToBeAdded;\n  //     }\n  //\n  //     axios.post('http://localhost:3001/api/putData', {\n  //         id: idToBeAdded,\n  //         message: message,\n  //     });\n  // };\n  //\n  // // our delete method that uses our backend api\n  // // to remove existing database information\n  // deleteFromDB = (idTodelete) => {\n  //     parseInt(idTodelete);\n  //     let objIdToDelete = null;\n  //     this.state.data.forEach((dat) => {\n  //         if (dat.id === +idTodelete) {\n  //             objIdToDelete = dat._id;\n  //         }\n  //     });\n  //\n  //     axios.delete('http://localhost:3001/api/deleteData', {\n  //         data: {\n  //             id: objIdToDelete,\n  //         },\n  //     });\n  // };\n  //\n  // // our update method that uses our backend api\n  // // to overwrite existing data base information\n  // updateDB = (idToUpdate, updateToApply) => {\n  //     let objIdToUpdate = null;\n  //     parseInt(idToUpdate);\n  //     this.state.data.forEach((dat) => {\n  //         if (dat.id === +idToUpdate) {\n  //             objIdToUpdate = dat._id;\n  //         }\n  //     });\n  //\n  //     axios.post('http://localhost:3001/api/updateData', {\n  //         id: objIdToUpdate,\n  //         update: { message: updateToApply },\n  //     });\n  // };\n  //\n  // // here is our UI\n  // // it is easy to understand their functions when you\n  // // see them render into our screen\n  render() {\n    // const { data } = this.state;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \" \"));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["D:\\training\\react\\5\\serv_rout_db\\client\\src\\App.js"],"names":["React","Component","App","state","data","id","message","intervalIsSet","idToDelete","idToUpdate","objectToUpdate","getDataFromDb","fetch","then","json","res","setState","componentDidMount","console","log","interval","setInterval","componentWillUnmount","clearInterval","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;;AAEA,MAAMC,GAAN,SAAkBD,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAExBE,KAFwB,GAEhB;AACJC,MAAAA,IAAI,EAAE,EADF;AAEJC,MAAAA,EAAE,EAAE,CAFA;AAGJC,MAAAA,OAAO,EAAE,IAHL;AAIJC,MAAAA,aAAa,EAAE,KAJX;AAKJC,MAAAA,UAAU,EAAE,IALR;AAMJC,MAAAA,UAAU,EAAE,IANR;AAOJC,MAAAA,cAAc,EAAE;AAPZ,KAFgB;;AAAA,SAwCxBC,aAxCwB,GAwCR,MAAM;AAClB;AACAC,MAAAA,KAAK,CAAC,gCAAD,CAAL,CACKC,IADL,CACWT,IAAD,IAAUA,IAAI,CAACU,IAAL,EADpB,EAEKD,IAFL,CAEWE,GAAD,IAAS,KAAKC,QAAL,CAAc;AAAEZ,QAAAA,IAAI,EAAEW;AAAR,OAAd,CAFnB,EAFkB,CAKd;AACP,KA9CuB;AAAA;;AAYxB;AACA;AACA;AACAE,EAAAA,iBAAiB,GAAG;AAChB,SAAKN,aAAL;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKhB,KAAL,CAAWC,IAAvB;;AACA,QAAI,CAAC,KAAKD,KAAL,CAAWI,aAAhB,EAA+B;AAC3B,UAAIa,QAAQ,GAAGC,WAAW,CAAC,KAAKV,aAAN,EAAqB,IAArB,CAA1B;AACA,WAAKK,QAAL,CAAc;AAAET,QAAAA,aAAa,EAAEa;AAAjB,OAAd;AACH;AACJ,GAtBuB,CAwBxB;AACA;;;AACAE,EAAAA,oBAAoB,GAAG;AACnB,QAAI,KAAKnB,KAAL,CAAWI,aAAf,EAA8B;AAC1BgB,MAAAA,aAAa,CAAC,KAAKpB,KAAL,CAAWI,aAAZ,CAAb;AACA,WAAKS,QAAL,CAAc;AAAET,QAAAA,aAAa,EAAE;AAAjB,OAAd;AACH;AACJ,GA/BuB,CAiCxB;AACA;AACA;AACA;AAEA;AACA;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAiB,EAAAA,MAAM,GAAG;AACL;AACA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADJ,CADJ;AA2DH;;AAlKuB;;AAqK5B,eAAetB,GAAf","sourcesContent":["import React, { Component } from 'react';\n// import axios from 'axios';\n\nclass App extends Component {\n    // initialize our state\n    state = {\n        data: [],\n        id: 0,\n        message: null,\n        intervalIsSet: false,\n        idToDelete: null,\n        idToUpdate: null,\n        objectToUpdate: null,\n    };\n\n    // when component mounts, first thing it does is fetch all existing data in our db\n    // then we incorporate a polling logic so that we can easily see if our db has\n    // changed and implement those changes into our UI\n    componentDidMount() {\n        this.getDataFromDb();\n        console.log(this.state.data)\n        if (!this.state.intervalIsSet) {\n            let interval = setInterval(this.getDataFromDb, 1000);\n            this.setState({ intervalIsSet: interval });\n        }\n    }\n\n    // never let a process live forever\n    // always kill a process everytime we are done using it\n    componentWillUnmount() {\n        if (this.state.intervalIsSet) {\n            clearInterval(this.state.intervalIsSet);\n            this.setState({ intervalIsSet: null });\n        }\n    }\n\n    // just a note, here, in the front end, we use the id key of our data object\n    // in order to identify which we want to Update or delete.\n    // for our back end, we use the object id assigned by MongoDB to modify\n    // data base entries\n\n    // our first get method that uses our backend api to\n    // fetch data from our data base\n    getDataFromDb = () => {\n        // let arr =[]\n        fetch('http://localhost:3001/category')\n            .then((data) => data.json())\n            .then((res) => this.setState({ data: res }))\n            // .then((res) => console.log(res))\n    };\n\n    // // our put method that uses our backend api\n    // // to create new query into our data base\n    // putDataToDB = (message) => {\n    //     let currentIds = this.state.data.map((data) => data.id);\n    //     let idToBeAdded = 0;\n    //     while (currentIds.includes(idToBeAdded)) {\n    //         ++idToBeAdded;\n    //     }\n    //\n    //     axios.post('http://localhost:3001/api/putData', {\n    //         id: idToBeAdded,\n    //         message: message,\n    //     });\n    // };\n    //\n    // // our delete method that uses our backend api\n    // // to remove existing database information\n    // deleteFromDB = (idTodelete) => {\n    //     parseInt(idTodelete);\n    //     let objIdToDelete = null;\n    //     this.state.data.forEach((dat) => {\n    //         if (dat.id === +idTodelete) {\n    //             objIdToDelete = dat._id;\n    //         }\n    //     });\n    //\n    //     axios.delete('http://localhost:3001/api/deleteData', {\n    //         data: {\n    //             id: objIdToDelete,\n    //         },\n    //     });\n    // };\n    //\n    // // our update method that uses our backend api\n    // // to overwrite existing data base information\n    // updateDB = (idToUpdate, updateToApply) => {\n    //     let objIdToUpdate = null;\n    //     parseInt(idToUpdate);\n    //     this.state.data.forEach((dat) => {\n    //         if (dat.id === +idToUpdate) {\n    //             objIdToUpdate = dat._id;\n    //         }\n    //     });\n    //\n    //     axios.post('http://localhost:3001/api/updateData', {\n    //         id: objIdToUpdate,\n    //         update: { message: updateToApply },\n    //     });\n    // };\n    //\n    // // here is our UI\n    // // it is easy to understand their functions when you\n    // // see them render into our screen\n    render() {\n        // const { data } = this.state;\n        return (\n            <div>\n                <button> </button>\n    {/*//         <ul>*/}\n    {/*//         {data.length <= 0*/}\n    {/*//                 ? 'NO DB ENTRIES YET'*/}\n    {/*//                 : data.map((dat) => (*/}\n    {/*//                     <li style={{ padding: '10px' }} key={data.message}>*/}\n    {/*//         <span style={{ color: 'gray' }}> id: </span> {dat.id} <br />*/}\n    {/*//     <span style={{ color: 'gray' }}> data: </span>*/}\n    {/*//     {dat.message}*/}\n    {/*// </li>*/}\n    {/*// ))}*/}\n    {/*// </ul>*/}\n    {/*//     <div style={{ padding: '10px' }}>*/}\n    {/*// <input*/}\n    {/*//     type=\"text\"*/}\n    {/*//     onChange={(e) => this.setState({ message: e.target.value })}*/}\n    {/*//     placeholder=\"add something in the database\"*/}\n    {/*//     style={{ width: '200px' }}*/}\n    {/*//     />*/}\n    {/*//     <button onClick={() => this.putDataToDB(this.state.message)}>*/}\n    {/*//     ADD*/}\n    {/*//     </button>*/}\n    {/*//     </div>*/}\n    {/*//     <div style={{ padding: '10px' }}>*/}\n    {/*// <input*/}\n    {/*//     type=\"text\"*/}\n    {/*//     style={{ width: '200px' }}*/}\n    {/*//     onChange={(e) => this.setState({ idToDelete: e.target.value })}*/}\n    {/*//     placeholder=\"put id of item to delete here\"*/}\n    {/*//         />*/}\n    {/*//         <button onClick={() => this.deleteFromDB(this.state.idToDelete)}>*/}\n    {/*//     DELETE*/}\n    {/*//     </button>*/}\n    {/*//     </div>*/}\n    {/*//     <div style={{ padding: '10px' }}>*/}\n    {/*// <input*/}\n    {/*//     type=\"text\"*/}\n    {/*//     style={{ width: '200px' }}*/}\n    {/*//     onChange={(e) => this.setState({ idToUpdate: e.target.value })}*/}\n    {/*//     placeholder=\"id of item to update here\"*/}\n    {/*//         />*/}\n    {/*//         <input*/}\n    {/*//     type=\"text\"*/}\n    {/*//     style={{ width: '200px' }}*/}\n    {/*//     onChange={(e) => this.setState({ updateToApply: e.target.value })}*/}\n    {/*//     placeholder=\"put new value of the item here\"*/}\n    {/*//         />*/}\n    {/*//         <button*/}\n    {/*//     onClick={() =>*/}\n    {/*//     this.updateDB(this.state.idToUpdate, this.state.updateToApply)*/}\n    {/*// }*/}\n    {/*// >*/}\n    {/*//     UPDATE*/}\n    {/*//     </button>*/}\n    {/*//     </div>*/}\n        </div>\n    );\n    }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}
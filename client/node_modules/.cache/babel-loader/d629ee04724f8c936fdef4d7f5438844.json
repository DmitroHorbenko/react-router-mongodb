{"ast":null,"code":"var _jsxFileName = \"D:\\\\training\\\\react\\\\5\\\\serv_rout_db\\\\client\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: [],\n      id: 0,\n      message: null,\n      intervalIsSet: false,\n      idToDelete: null,\n      idToUpdate: null,\n      objectToUpdate: null\n    };\n\n    this.getDataFromDb = () => {\n      // let arr =[]\n      fetch('http://localhost:3001/api/category').then(data => data.json()).then(data => this.setState({\n        data: data\n      }));\n    };\n\n    this.putDataToDB = name => {\n      let currentIds = this.state.data.map(data => data.id);\n      let idToBeAdded = 0;\n\n      while (currentIds.includes(idToBeAdded)) {\n        ++idToBeAdded;\n      }\n\n      axios.post('http://localhost:3001/api/category', {\n        _id: idToBeAdded,\n        message: name\n      });\n    };\n  }\n\n  // when component mounts, first thing it does is fetch all existing data in our db\n  // then we incorporate a polling logic so that we can easily see if our db has\n  // changed and implement those changes into our UI\n  componentDidMount() {\n    this.getDataFromDb();\n\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb, 1000);\n      this.setState({\n        intervalIsSet: interval\n      });\n    }\n  } // never let a process live forever\n  // always kill a process everytime we are done using it\n\n\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({\n        intervalIsSet: null\n      });\n    }\n  } // just a note, here, in the front end, we use the id key of our data object\n  // in order to identify which we want to Update or delete.\n  // for our back end, we use the object id assigned by MongoDB to modify\n  // data base entries\n  // our first get method that uses our backend api to\n  // fetch data from our data base\n\n\n  //\n  // // our delete method that uses our backend api\n  // // to remove existing database information\n  // deleteFromDB = (idTodelete) => {\n  //     parseInt(idTodelete);\n  //     let objIdToDelete = null;\n  //     this.state.data.forEach((dat) => {\n  //         if (dat.id === +idTodelete) {\n  //             objIdToDelete = dat._id;\n  //         }\n  //     });\n  //\n  //     axios.delete('http://localhost:3001/api/deleteData', {\n  //         data: {\n  //             id: objIdToDelete,\n  //         },\n  //     });\n  // };\n  //\n  // // our update method that uses our backend api\n  // // to overwrite existing data base information\n  // updateDB = (idToUpdate, updateToApply) => {\n  //     let objIdToUpdate = null;\n  //     parseInt(idToUpdate);\n  //     this.state.data.forEach((dat) => {\n  //         if (dat.id === +idToUpdate) {\n  //             objIdToUpdate = dat._id;\n  //         }\n  //     });\n  //\n  //     axios.post('http://localhost:3001/api/updateData', {\n  //         id: objIdToUpdate,\n  //         update: { message: updateToApply },\n  //     });\n  // };\n  //\n  // // here is our UI\n  // // it is easy to understand their functions when you\n  // // see them render into our screen\n  render() {\n    const data = this.state.data;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, data.length), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, data.length <= 0 ? 'NO DB ENTRIES YET' : data.map(dat => React.createElement(\"li\", {\n      style: {\n        padding: '10px'\n      },\n      key: data._id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      style: {\n        color: 'gray'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \" id: \"), \" \", dat._id, \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      style: {\n        color: 'gray'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, \" name: \"), \" \", dat.name))), React.createElement(\"div\", {\n      style: {\n        padding: '10px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      onChange: e => this.setState({\n        name: e.target.value\n      }),\n      placeholder: \"add something in the database\",\n      style: {\n        width: '200px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: () => this.putDataToDB(this.state.name),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, \"ADD\")));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["D:\\training\\react\\5\\serv_rout_db\\client\\src\\App.js"],"names":["React","Component","axios","App","state","data","id","message","intervalIsSet","idToDelete","idToUpdate","objectToUpdate","getDataFromDb","fetch","then","json","setState","putDataToDB","name","currentIds","map","idToBeAdded","includes","post","_id","componentDidMount","interval","setInterval","componentWillUnmount","clearInterval","render","length","dat","padding","color","e","target","value","width"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n\nclass App extends Component {\n    // initialize our state\n    state = {\n        data: [],\n        id: 0,\n        message: null,\n        intervalIsSet: false,\n        idToDelete: null,\n        idToUpdate: null,\n        objectToUpdate: null,\n    };\n\n    // when component mounts, first thing it does is fetch all existing data in our db\n    // then we incorporate a polling logic so that we can easily see if our db has\n    // changed and implement those changes into our UI\n    componentDidMount() {\n        this.getDataFromDb();\n        if (!this.state.intervalIsSet) {\n            let interval = setInterval(this.getDataFromDb, 1000);\n            this.setState({ intervalIsSet: interval });\n        }\n    }\n\n    // never let a process live forever\n    // always kill a process everytime we are done using it\n    componentWillUnmount() {\n        if (this.state.intervalIsSet) {\n            clearInterval(this.state.intervalIsSet);\n            this.setState({ intervalIsSet: null });\n        }\n    }\n\n    // just a note, here, in the front end, we use the id key of our data object\n    // in order to identify which we want to Update or delete.\n    // for our back end, we use the object id assigned by MongoDB to modify\n    // data base entries\n\n    // our first get method that uses our backend api to\n    // fetch data from our data base\n    getDataFromDb = () => {\n        // let arr =[]\n        fetch('http://localhost:3001/api/category')\n            .then((data) => data.json())\n            .then((data) => this.setState({data: data}))\n    };\n\n    // // our put method that uses our backend api\n    // // to create new query into our data base\n    putDataToDB = (name) => {\n        let currentIds = this.state.data.map((data) => data.id);\n        let idToBeAdded = 0;\n        while (currentIds.includes(idToBeAdded)) {\n            ++idToBeAdded;\n        }\n\n        axios.post('http://localhost:3001/api/category', {\n            _id: idToBeAdded,\n            message: name,\n        });\n    };\n    //\n    // // our delete method that uses our backend api\n    // // to remove existing database information\n    // deleteFromDB = (idTodelete) => {\n    //     parseInt(idTodelete);\n    //     let objIdToDelete = null;\n    //     this.state.data.forEach((dat) => {\n    //         if (dat.id === +idTodelete) {\n    //             objIdToDelete = dat._id;\n    //         }\n    //     });\n    //\n    //     axios.delete('http://localhost:3001/api/deleteData', {\n    //         data: {\n    //             id: objIdToDelete,\n    //         },\n    //     });\n    // };\n    //\n    // // our update method that uses our backend api\n    // // to overwrite existing data base information\n    // updateDB = (idToUpdate, updateToApply) => {\n    //     let objIdToUpdate = null;\n    //     parseInt(idToUpdate);\n    //     this.state.data.forEach((dat) => {\n    //         if (dat.id === +idToUpdate) {\n    //             objIdToUpdate = dat._id;\n    //         }\n    //     });\n    //\n    //     axios.post('http://localhost:3001/api/updateData', {\n    //         id: objIdToUpdate,\n    //         update: { message: updateToApply },\n    //     });\n    // };\n    //\n    // // here is our UI\n    // // it is easy to understand their functions when you\n    // // see them render into our screen\n    render() {\n        const { data } = this.state;\n        return (\n            <div>\n                <button>{ data.length }</button>\n                <ul>\n                 {data.length <= 0\n                     ? 'NO DB ENTRIES YET'\n                     : data.map((dat) => (\n                         <li style={{ padding: '10px' }} key={data._id}>\n                             <span style={{ color: 'gray' }}> id: </span> {dat._id} <br />\n                             <span style={{ color: 'gray' }}> name: </span> {dat.name}\n                        </li>\n            ))}\n                </ul>\n         <div style={{ padding: '10px' }}>\n            <input\n                 type=\"text\"\n                 onChange={(e) => this.setState({ name: e.target.value })}\n                 placeholder=\"add something in the database\"\n                 style={{ width: '200px' }}\n            />\n            <button onClick={() => this.putDataToDB(this.state.name)}>\n         ADD\n         </button>\n         </div>\n    {/*//     <div style={{ padding: '10px' }}>*/}\n    {/*// <input*/}\n    {/*//     type=\"text\"*/}\n    {/*//     style={{ width: '200px' }}*/}\n    {/*//     onChange={(e) => this.setState({ idToDelete: e.target.value })}*/}\n    {/*//     placeholder=\"put id of item to delete here\"*/}\n    {/*//         />*/}\n    {/*//         <button onClick={() => this.deleteFromDB(this.state.idToDelete)}>*/}\n    {/*//     DELETE*/}\n    {/*//     </button>*/}\n    {/*//     </div>*/}\n    {/*//     <div style={{ padding: '10px' }}>*/}\n    {/*// <input*/}\n    {/*//     type=\"text\"*/}\n    {/*//     style={{ width: '200px' }}*/}\n    {/*//     onChange={(e) => this.setState({ idToUpdate: e.target.value })}*/}\n    {/*//     placeholder=\"id of item to update here\"*/}\n    {/*//         />*/}\n    {/*//         <input*/}\n    {/*//     type=\"text\"*/}\n    {/*//     style={{ width: '200px' }}*/}\n    {/*//     onChange={(e) => this.setState({ updateToApply: e.target.value })}*/}\n    {/*//     placeholder=\"put new value of the item here\"*/}\n    {/*//         />*/}\n    {/*//         <button*/}\n    {/*//     onClick={() =>*/}\n    {/*//     this.updateDB(this.state.idToUpdate, this.state.updateToApply)*/}\n    {/*// }*/}\n    {/*// >*/}\n    {/*//     UPDATE*/}\n    {/*//     </button>*/}\n    {/*//     </div>*/}\n        </div>\n    );\n    }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}
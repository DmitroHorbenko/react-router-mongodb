{"ast":null,"code":"var _jsxFileName = \"D:\\\\training\\\\react\\\\5\\\\serv_rout_db\\\\client\\\\src\\\\App.js\";\nimport React, { Component } from 'react'; // import axios from 'axios';\n\nimport './App.css'; // import Header from './Component/Header'\n// import Content from './Component/Content'\n\nimport Sidebar from './Component/Sidebar';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getAlbumFromDb = () => {\n      // let arr =[]\n      fetch('http://localhost:3001/api/category').then(data => data.json()).then(data => this.setState({\n        albums: data\n      }));\n    };\n\n    this.getPhotoFromDb = () => {\n      // let arr =[]\n      fetch('http://localhost:3001/api/category').then(data => data.json()).then(data => this.setState({\n        albums: data\n      }));\n    };\n\n    this.setCurrentAlbum = value => {\n      this.setState({\n        currentAlbum: +value\n      });\n    };\n\n    this.state = {\n      photos: [],\n      albums: [],\n      currentAlbum: 1,\n      cart: []\n    }; // this.getAllAlbums();\n    // this.getAllPhoto()\n  } // when component mounts, first thing it does is fetch all existing data in our db\n  // then we incorporate a polling logic so that we can easily see if our db has\n  // changed and implement those changes into our UI\n\n\n  componentDidMount() {\n    if (this.state.albums.length === 0) {\n      this.getAlbumFromDb();\n    }\n\n    if (this.state.photos.length === 0) {\n      this.getPhotoFromDb();\n    }\n  } // never let a process live forever\n  // always kill a process everytime we are done using it\n\n\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({\n        intervalIsSet: null\n      });\n    }\n  } // just a note, here, in the front end, we use the id key of our data object\n  // in order to identify which we want to Update or delete.\n  // for our back end, we use the object id assigned by MongoDB to modify\n  // data base entries\n  // our first get method that uses our backend api to\n  // fetch data from our data base\n\n\n  // // our put method that uses our backend api\n  // // to create new query into our data base\n  // putDataToDB = (title) => {\n  //     let currentIds = this.state.data.map((data) => data.id);\n  //     let idToBeAdded = 0;\n  //     while (currentIds.includes(idToBeAdded)) {\n  //         ++idToBeAdded;\n  //     }\n  //\n  //     axios.post('http://localhost:3001/api/category', {\n  //         title: title,\n  //     });\n  // };\n  //\n  // // our delete method that uses our backend api\n  // // to remove existing database information\n  // deleteFromDB = (idTodelete) => {\n  //     parseInt(idTodelete);\n  //     let objIdToDelete = null;\n  //     this.state.data.forEach((dat) => {\n  //         if (dat.id === +idTodelete) {\n  //             objIdToDelete = dat._id;\n  //         }\n  //     });\n  //\n  //     axios.delete('http://localhost:3001/api/deleteData', {\n  //         data: {\n  //             id: objIdToDelete,\n  //         },\n  //     });\n  // };\n  //\n  // // our update method that uses our backend api\n  // // to overwrite existing data base information\n  // updateDB = (idToUpdate, updateToApply) => {\n  //     let objIdToUpdate = null;\n  //     parseInt(idToUpdate);\n  //     this.state.data.forEach((dat) => {\n  //         if (dat.id === +idToUpdate) {\n  //             objIdToUpdate = dat._id;\n  //         }\n  //     });\n  //\n  //     axios.post('http://localhost:3001/api/updateData', {\n  //         id: objIdToUpdate,\n  //         update: { message: updateToApply },\n  //     });\n  // };\n  //\n  // // here is our UI\n  // // it is easy to understand their functions when you\n  // // see them render into our screen\n  render() {\n    const albums = this.state.albums;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, albums.length), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, albums.length <= 0 ? 'NO DB ENTRIES YET' : albums.map(dat => React.createElement(\"li\", {\n      key: albums._id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      style: {\n        color: 'gray'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, \" id: \"), \" \", dat._id, \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      style: {\n        color: 'gray'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \" category: \"), \" \", dat.title))), React.createElement(\"div\", {\n      className: \"sidebar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      albums: this.state.albums,\n      setCurrentAlbum: this.setCurrentAlbum,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["D:\\training\\react\\5\\serv_rout_db\\client\\src\\App.js"],"names":["React","Component","Sidebar","App","constructor","props","getAlbumFromDb","fetch","then","data","json","setState","albums","getPhotoFromDb","setCurrentAlbum","value","currentAlbum","state","photos","cart","componentDidMount","length","componentWillUnmount","intervalIsSet","clearInterval","render","map","dat","_id","color","title"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n// import axios from 'axios';\nimport './App.css';\n// import Header from './Component/Header'\n// import Content from './Component/Content'\nimport Sidebar from './Component/Sidebar'\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            photos: [],\n            albums: [],\n            currentAlbum: 1,\n            cart: []\n        };\n\n        // this.getAllAlbums();\n        // this.getAllPhoto()\n    }\n\n    // when component mounts, first thing it does is fetch all existing data in our db\n    // then we incorporate a polling logic so that we can easily see if our db has\n    // changed and implement those changes into our UI\n    componentDidMount() {\n        if (this.state.albums.length === 0) {\n            this.getAlbumFromDb();\n        }\n        if (this.state.photos.length === 0) {\n            this.getPhotoFromDb();\n        }\n\n    }\n\n    // never let a process live forever\n    // always kill a process everytime we are done using it\n    componentWillUnmount() {\n        if (this.state.intervalIsSet) {\n            clearInterval(this.state.intervalIsSet);\n            this.setState({ intervalIsSet: null });\n        }\n\n    }\n\n    // just a note, here, in the front end, we use the id key of our data object\n    // in order to identify which we want to Update or delete.\n    // for our back end, we use the object id assigned by MongoDB to modify\n    // data base entries\n\n    // our first get method that uses our backend api to\n    // fetch data from our data base\n    getAlbumFromDb = () => {\n        // let arr =[]\n        fetch('http://localhost:3001/api/category')\n            .then((data) => data.json())\n            .then((data) => this.setState({albums: data}))\n    };\n\n    getPhotoFromDb = () => {\n        // let arr =[]\n        fetch('http://localhost:3001/api/category')\n            .then((data) => data.json())\n            .then((data) => this.setState({albums: data}))\n    };\n\n    setCurrentAlbum = (value) => {\n        this.setState({ currentAlbum: +value })\n    }\n\n    // // our put method that uses our backend api\n    // // to create new query into our data base\n    // putDataToDB = (title) => {\n    //     let currentIds = this.state.data.map((data) => data.id);\n    //     let idToBeAdded = 0;\n    //     while (currentIds.includes(idToBeAdded)) {\n    //         ++idToBeAdded;\n    //     }\n    //\n    //     axios.post('http://localhost:3001/api/category', {\n    //         title: title,\n    //     });\n    // };\n    //\n    // // our delete method that uses our backend api\n    // // to remove existing database information\n    // deleteFromDB = (idTodelete) => {\n    //     parseInt(idTodelete);\n    //     let objIdToDelete = null;\n    //     this.state.data.forEach((dat) => {\n    //         if (dat.id === +idTodelete) {\n    //             objIdToDelete = dat._id;\n    //         }\n    //     });\n    //\n    //     axios.delete('http://localhost:3001/api/deleteData', {\n    //         data: {\n    //             id: objIdToDelete,\n    //         },\n    //     });\n    // };\n    //\n    // // our update method that uses our backend api\n    // // to overwrite existing data base information\n    // updateDB = (idToUpdate, updateToApply) => {\n    //     let objIdToUpdate = null;\n    //     parseInt(idToUpdate);\n    //     this.state.data.forEach((dat) => {\n    //         if (dat.id === +idToUpdate) {\n    //             objIdToUpdate = dat._id;\n    //         }\n    //     });\n    //\n    //     axios.post('http://localhost:3001/api/updateData', {\n    //         id: objIdToUpdate,\n    //         update: { message: updateToApply },\n    //     });\n    // };\n    //\n    // // here is our UI\n    // // it is easy to understand their functions when you\n    // // see them render into our screen\n    render() {\n        const { albums } = this.state\n        return (\n            <div>\n                <button>{ albums.length }</button>\n                <ul>\n                 {albums.length <= 0\n                     ? 'NO DB ENTRIES YET'\n                     : albums.map((dat) => (\n                         <li key={albums._id}>\n                             <span style={{ color: 'gray' }}> id: </span> {dat._id} <br />\n                             <span style={{ color: 'gray' }}> category: </span> {dat.title}\n                        </li>\n            ))}\n                </ul>\n                <div className={\"sidebar\"}><Sidebar albums={this.state.albums} setCurrentAlbum={this.setCurrentAlbum}/></div>\n            </div>\n    );\n    }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}
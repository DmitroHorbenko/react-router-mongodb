{"ast":null,"code":"var _jsxFileName = \"D:\\\\training\\\\react\\\\5\\\\serv_rout_db\\\\client\\\\src\\\\App.js\";\nimport React, { Component } from 'react'; // import axios from 'axios';\n\nimport './App.css'; // import Header from './Component/Header'\n// import Content from './Component/Content'\n\nimport Sidebar from './Component/Sidebar';\nimport Content from \"./Component/Content\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getCategoryFromDb = () => {\n      // let arr =[]\n      fetch('http://localhost:3001/api/category').then(data => data.json()).then(data => this.setState({\n        albums: data\n      }));\n    };\n\n    this.getProductFromDb = () => {\n      // let arr =[]\n      fetch('http://localhost:3001/api/product').then(res => res.json()).then(res => this.setState({\n        categories: res\n      }));\n    };\n\n    this.setCurrentCategory = value => {\n      this.setState({\n        currentCategory: value\n      });\n    };\n\n    this.state = {\n      categories: [],\n      albums: [],\n      currentCategory: \"Notebook\",\n      cart: []\n    }; // this.getProductFromDb();\n  } // when component mounts, first thing it does is fetch all existing data in our db\n  // then we incorporate a polling logic so that we can easily see if our db has\n  // changed and implement those changes into our UI\n\n\n  componentDidMount() {\n    if (this.state.albums.length === 0) {\n      this.getCategoryFromDb();\n    }\n\n    this.getProductFromDb();\n    console.log(this.state.categories.length);\n  } // never let a process live forever\n  // always kill a process everytime we are done using it\n\n\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({\n        intervalIsSet: null\n      });\n    }\n  } // just a note, here, in the front end, we use the id key of our data object\n  // in order to identify which we want to Update or delete.\n  // for our back end, we use the object id assigned by MongoDB to modify\n  // data base entries\n  // our first get method that uses our backend api to\n  // fetch data from our data base\n\n\n  // // our put method that uses our backend api\n  // // to create new query into our data base\n  // putDataToDB = (title) => {\n  //     let currentIds = this.state.data.map((data) => data.id);\n  //     let idToBeAdded = 0;\n  //     while (currentIds.includes(idToBeAdded)) {\n  //         ++idToBeAdded;\n  //     }\n  //\n  //     axios.post('http://localhost:3001/api/category', {\n  //         title: title,\n  //     });\n  // };\n  //\n  // // our delete method that uses our backend api\n  // // to remove existing database information\n  // deleteFromDB = (idTodelete) => {\n  //     parseInt(idTodelete);\n  //     let objIdToDelete = null;\n  //     this.state.data.forEach((dat) => {\n  //         if (dat.id === +idTodelete) {\n  //             objIdToDelete = dat._id;\n  //         }\n  //     });\n  //\n  //     axios.delete('http://localhost:3001/api/deleteData', {\n  //         data: {\n  //             id: objIdToDelete,\n  //         },\n  //     });\n  // };\n  //\n  // // our update method that uses our backend api\n  // // to overwrite existing data base information\n  // updateDB = (idToUpdate, updateToApply) => {\n  //     let objIdToUpdate = null;\n  //     parseInt(idToUpdate);\n  //     this.state.data.forEach((dat) => {\n  //         if (dat.id === +idToUpdate) {\n  //             objIdToUpdate = dat._id;\n  //         }\n  //     });\n  //\n  //     axios.post('http://localhost:3001/api/updateData', {\n  //         id: objIdToUpdate,\n  //         update: { message: updateToApply },\n  //     });\n  // };\n  //\n  // // here is our UI\n  // // it is easy to understand their functions when you\n  // // see them render into our screen\n  render() {\n    // const { albums } = this.state\n    return React.createElement(\"section\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"sidebar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      albums: this.state.albums,\n      setCurrentCategory: this.setCurrentCategory,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(Content, {\n      categories: this.state.categories,\n      currentCategory: this.state.currentCategory,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["D:\\training\\react\\5\\serv_rout_db\\client\\src\\App.js"],"names":["React","Component","Sidebar","Content","App","constructor","props","getCategoryFromDb","fetch","then","data","json","setState","albums","getProductFromDb","res","categories","setCurrentCategory","value","currentCategory","state","cart","componentDidMount","length","console","log","componentWillUnmount","intervalIsSet","clearInterval","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n// import axios from 'axios';\nimport './App.css';\n// import Header from './Component/Header'\n// import Content from './Component/Content'\nimport Sidebar from './Component/Sidebar'\nimport Content from \"./Component/Content\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            categories: [],\n            albums: [],\n            currentCategory: \"Notebook\",\n            cart: []\n        };\n\n\n        // this.getProductFromDb();\n    }\n\n    // when component mounts, first thing it does is fetch all existing data in our db\n    // then we incorporate a polling logic so that we can easily see if our db has\n    // changed and implement those changes into our UI\n    componentDidMount() {\n        if (this.state.albums.length === 0) {\n            this.getCategoryFromDb();\n        }\n\n            this.getProductFromDb();\n\n        console.log(this.state.categories.length)\n    }\n\n    // never let a process live forever\n    // always kill a process everytime we are done using it\n    componentWillUnmount() {\n        if (this.state.intervalIsSet) {\n            clearInterval(this.state.intervalIsSet);\n            this.setState({ intervalIsSet: null });\n        }\n\n    }\n\n    // just a note, here, in the front end, we use the id key of our data object\n    // in order to identify which we want to Update or delete.\n    // for our back end, we use the object id assigned by MongoDB to modify\n    // data base entries\n\n    // our first get method that uses our backend api to\n    // fetch data from our data base\n    getCategoryFromDb = () => {\n        // let arr =[]\n        fetch('http://localhost:3001/api/category')\n            .then((data) => data.json())\n            .then((data) => this.setState({albums: data}))\n    };\n\n    getProductFromDb = () => {\n        // let arr =[]\n        fetch('http://localhost:3001/api/product')\n            .then((res) => res.json())\n            .then((res) => this.setState({categories: res}))\n    };\n\n    setCurrentCategory = (value) => {\n        this.setState({ currentCategory: value })\n    }\n\n    // // our put method that uses our backend api\n    // // to create new query into our data base\n    // putDataToDB = (title) => {\n    //     let currentIds = this.state.data.map((data) => data.id);\n    //     let idToBeAdded = 0;\n    //     while (currentIds.includes(idToBeAdded)) {\n    //         ++idToBeAdded;\n    //     }\n    //\n    //     axios.post('http://localhost:3001/api/category', {\n    //         title: title,\n    //     });\n    // };\n    //\n    // // our delete method that uses our backend api\n    // // to remove existing database information\n    // deleteFromDB = (idTodelete) => {\n    //     parseInt(idTodelete);\n    //     let objIdToDelete = null;\n    //     this.state.data.forEach((dat) => {\n    //         if (dat.id === +idTodelete) {\n    //             objIdToDelete = dat._id;\n    //         }\n    //     });\n    //\n    //     axios.delete('http://localhost:3001/api/deleteData', {\n    //         data: {\n    //             id: objIdToDelete,\n    //         },\n    //     });\n    // };\n    //\n    // // our update method that uses our backend api\n    // // to overwrite existing data base information\n    // updateDB = (idToUpdate, updateToApply) => {\n    //     let objIdToUpdate = null;\n    //     parseInt(idToUpdate);\n    //     this.state.data.forEach((dat) => {\n    //         if (dat.id === +idToUpdate) {\n    //             objIdToUpdate = dat._id;\n    //         }\n    //     });\n    //\n    //     axios.post('http://localhost:3001/api/updateData', {\n    //         id: objIdToUpdate,\n    //         update: { message: updateToApply },\n    //     });\n    // };\n    //\n    // // here is our UI\n    // // it is easy to understand their functions when you\n    // // see them render into our screen\n    render() {\n        // const { albums } = this.state\n        return (\n            <section>\n                <div className={\"sidebar\"}><Sidebar albums={this.state.albums} setCurrentCategory={this.setCurrentCategory}/></div>\n                <div className={\"content\"}><Content categories={this.state.categories} currentCategory={this.state.currentCategory}/></div>\n            </section>\n    );\n    }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"D:\\\\training\\\\react\\\\5\\\\serv_rout_db\\\\client\\\\src\\\\App.js\";\nimport React, { Component } from 'react'; // import axios from 'axios';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getDataFromDb = () => {\n      // let arr =[]\n      fetch('http://localhost:3001/api/category').then(data => data.json()).then(data => this.setState({\n        data: data\n      }));\n    };\n\n    this.state = {\n      photos: [],\n      albums: [],\n      currentAlbum: 1,\n      cart: []\n    };\n    this.getAllAlbums();\n    this.getAllPhoto();\n  } // when component mounts, first thing it does is fetch all existing data in our db\n  // then we incorporate a polling logic so that we can easily see if our db has\n  // changed and implement those changes into our UI\n\n\n  componentDidMount() {\n    if (this.state.albums.length === 0) {\n      this.getDataFromDb();\n    }\n  } // never let a process live forever\n  // always kill a process everytime we are done using it\n\n\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({\n        intervalIsSet: null\n      });\n    }\n  } // just a note, here, in the front end, we use the id key of our data object\n  // in order to identify which we want to Update or delete.\n  // for our back end, we use the object id assigned by MongoDB to modify\n  // data base entries\n  // our first get method that uses our backend api to\n  // fetch data from our data base\n\n\n  // // our put method that uses our backend api\n  // // to create new query into our data base\n  // putDataToDB = (title) => {\n  //     let currentIds = this.state.data.map((data) => data.id);\n  //     let idToBeAdded = 0;\n  //     while (currentIds.includes(idToBeAdded)) {\n  //         ++idToBeAdded;\n  //     }\n  //\n  //     axios.post('http://localhost:3001/api/category', {\n  //         title: title,\n  //     });\n  // };\n  //\n  // // our delete method that uses our backend api\n  // // to remove existing database information\n  // deleteFromDB = (idTodelete) => {\n  //     parseInt(idTodelete);\n  //     let objIdToDelete = null;\n  //     this.state.data.forEach((dat) => {\n  //         if (dat.id === +idTodelete) {\n  //             objIdToDelete = dat._id;\n  //         }\n  //     });\n  //\n  //     axios.delete('http://localhost:3001/api/deleteData', {\n  //         data: {\n  //             id: objIdToDelete,\n  //         },\n  //     });\n  // };\n  //\n  // // our update method that uses our backend api\n  // // to overwrite existing data base information\n  // updateDB = (idToUpdate, updateToApply) => {\n  //     let objIdToUpdate = null;\n  //     parseInt(idToUpdate);\n  //     this.state.data.forEach((dat) => {\n  //         if (dat.id === +idToUpdate) {\n  //             objIdToUpdate = dat._id;\n  //         }\n  //     });\n  //\n  //     axios.post('http://localhost:3001/api/updateData', {\n  //         id: objIdToUpdate,\n  //         update: { message: updateToApply },\n  //     });\n  // };\n  //\n  // // here is our UI\n  // // it is easy to understand their functions when you\n  // // see them render into our screen\n  render() {\n    const data = this.state.data;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, data.length), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, data.length <= 0 ? 'NO DB ENTRIES YET' : data.map(dat => React.createElement(\"li\", {\n      style: {\n        padding: '10px'\n      },\n      key: data._id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      style: {\n        color: 'gray'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, \" id: \"), \" \", dat._id, \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      style: {\n        color: 'gray'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \" category: \"), \" \", dat.title))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["D:\\training\\react\\5\\serv_rout_db\\client\\src\\App.js"],"names":["React","Component","App","constructor","props","getDataFromDb","fetch","then","data","json","setState","state","photos","albums","currentAlbum","cart","getAllAlbums","getAllPhoto","componentDidMount","length","componentWillUnmount","intervalIsSet","clearInterval","render","map","dat","padding","_id","color","title"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;;AAEA,MAAMC,GAAN,SAAkBD,SAAlB,CAA4B;AACxBE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAsCnBC,aAtCmB,GAsCH,MAAM;AAClB;AACAC,MAAAA,KAAK,CAAC,oCAAD,CAAL,CACKC,IADL,CACWC,IAAD,IAAUA,IAAI,CAACC,IAAL,EADpB,EAEKF,IAFL,CAEWC,IAAD,IAAU,KAAKE,QAAL,CAAc;AAACF,QAAAA,IAAI,EAAEA;AAAP,OAAd,CAFpB;AAGH,KA3CkB;;AAEf,SAAKG,KAAL,GAAa;AACTC,MAAAA,MAAM,EAAE,EADC;AAETC,MAAAA,MAAM,EAAE,EAFC;AAGTC,MAAAA,YAAY,EAAE,CAHL;AAITC,MAAAA,IAAI,EAAE;AAJG,KAAb;AAOA,SAAKC,YAAL;AACA,SAAKC,WAAL;AACH,GAZuB,CAcxB;AACA;AACA;;;AACAC,EAAAA,iBAAiB,GAAG;AAChB,QAAI,KAAKP,KAAL,CAAWE,MAAX,CAAkBM,MAAlB,KAA6B,CAAjC,EAAoC;AAChC,WAAKd,aAAL;AACH;AACJ,GArBuB,CAuBxB;AACA;;;AACAe,EAAAA,oBAAoB,GAAG;AACnB,QAAI,KAAKT,KAAL,CAAWU,aAAf,EAA8B;AAC1BC,MAAAA,aAAa,CAAC,KAAKX,KAAL,CAAWU,aAAZ,CAAb;AACA,WAAKX,QAAL,CAAc;AAAEW,QAAAA,aAAa,EAAE;AAAjB,OAAd;AACH;AACJ,GA9BuB,CAgCxB;AACA;AACA;AACA;AAEA;AACA;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAE,EAAAA,MAAM,GAAG;AAAA,UACGf,IADH,GACY,KAAKG,KADjB,CACGH,IADH;AAEL,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAUA,IAAI,CAACW,MAAf,CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACEX,IAAI,CAACW,MAAL,IAAe,CAAf,GACK,mBADL,GAEKX,IAAI,CAACgB,GAAL,CAAUC,GAAD,IACP;AAAI,MAAA,KAAK,EAAE;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAX;AAAgC,MAAA,GAAG,EAAElB,IAAI,CAACmB,GAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAM,MAAA,KAAK,EAAE;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADJ,OACkDH,GAAG,CAACE,GADtD,OAC2D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAD3D,EAEI;AAAM,MAAA,KAAK,EAAE;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAFJ,OAEwDH,GAAG,CAACI,KAF5D,CADF,CAHP,CAFJ,CADJ;AAgBH;;AApHuB;;AAuH5B,eAAe3B,GAAf","sourcesContent":["import React, { Component } from 'react';\n// import axios from 'axios';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            photos: [],\n            albums: [],\n            currentAlbum: 1,\n            cart: []\n        };\n\n        this.getAllAlbums();\n        this.getAllPhoto()\n    }\n\n    // when component mounts, first thing it does is fetch all existing data in our db\n    // then we incorporate a polling logic so that we can easily see if our db has\n    // changed and implement those changes into our UI\n    componentDidMount() {\n        if (this.state.albums.length === 0) {\n            this.getDataFromDb();\n        }\n    }\n\n    // never let a process live forever\n    // always kill a process everytime we are done using it\n    componentWillUnmount() {\n        if (this.state.intervalIsSet) {\n            clearInterval(this.state.intervalIsSet);\n            this.setState({ intervalIsSet: null });\n        }\n    }\n\n    // just a note, here, in the front end, we use the id key of our data object\n    // in order to identify which we want to Update or delete.\n    // for our back end, we use the object id assigned by MongoDB to modify\n    // data base entries\n\n    // our first get method that uses our backend api to\n    // fetch data from our data base\n    getDataFromDb = () => {\n        // let arr =[]\n        fetch('http://localhost:3001/api/category')\n            .then((data) => data.json())\n            .then((data) => this.setState({data: data}))\n    };\n\n    // // our put method that uses our backend api\n    // // to create new query into our data base\n    // putDataToDB = (title) => {\n    //     let currentIds = this.state.data.map((data) => data.id);\n    //     let idToBeAdded = 0;\n    //     while (currentIds.includes(idToBeAdded)) {\n    //         ++idToBeAdded;\n    //     }\n    //\n    //     axios.post('http://localhost:3001/api/category', {\n    //         title: title,\n    //     });\n    // };\n    //\n    // // our delete method that uses our backend api\n    // // to remove existing database information\n    // deleteFromDB = (idTodelete) => {\n    //     parseInt(idTodelete);\n    //     let objIdToDelete = null;\n    //     this.state.data.forEach((dat) => {\n    //         if (dat.id === +idTodelete) {\n    //             objIdToDelete = dat._id;\n    //         }\n    //     });\n    //\n    //     axios.delete('http://localhost:3001/api/deleteData', {\n    //         data: {\n    //             id: objIdToDelete,\n    //         },\n    //     });\n    // };\n    //\n    // // our update method that uses our backend api\n    // // to overwrite existing data base information\n    // updateDB = (idToUpdate, updateToApply) => {\n    //     let objIdToUpdate = null;\n    //     parseInt(idToUpdate);\n    //     this.state.data.forEach((dat) => {\n    //         if (dat.id === +idToUpdate) {\n    //             objIdToUpdate = dat._id;\n    //         }\n    //     });\n    //\n    //     axios.post('http://localhost:3001/api/updateData', {\n    //         id: objIdToUpdate,\n    //         update: { message: updateToApply },\n    //     });\n    // };\n    //\n    // // here is our UI\n    // // it is easy to understand their functions when you\n    // // see them render into our screen\n    render() {\n        const { data } = this.state\n        return (\n            <div>\n                <button>{ data.length }</button>\n                <ul>\n                 {data.length <= 0\n                     ? 'NO DB ENTRIES YET'\n                     : data.map((dat) => (\n                         <li style={{ padding: '10px' }} key={data._id}>\n                             <span style={{ color: 'gray' }}> id: </span> {dat._id} <br />\n                             <span style={{ color: 'gray' }}> category: </span> {dat.title}\n                        </li>\n            ))}\n                </ul>\n\n            </div>\n    );\n    }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}